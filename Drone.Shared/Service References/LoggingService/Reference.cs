//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Drone.Shared.LoggingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BIException", Namespace="http://schemas.datacontract.org/2004/07/BILogger.Entities")]
    [System.SerializableAttribute()]
    public partial class BIException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Drone.Shared.LoggingService.BIException InnerExceptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Drone.Shared.LoggingService.LogActionEnum LogActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Drone.Shared.LoggingService.LogTypeEnum LogTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ApplicationName {
            get {
                return this.ApplicationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationNameField, value) != true)) {
                    this.ApplicationNameField = value;
                    this.RaisePropertyChanged("ApplicationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Drone.Shared.LoggingService.BIException InnerException {
            get {
                return this.InnerExceptionField;
            }
            set {
                if ((object.ReferenceEquals(this.InnerExceptionField, value) != true)) {
                    this.InnerExceptionField = value;
                    this.RaisePropertyChanged("InnerException");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Drone.Shared.LoggingService.LogActionEnum LogAction {
            get {
                return this.LogActionField;
            }
            set {
                if ((this.LogActionField.Equals(value) != true)) {
                    this.LogActionField = value;
                    this.RaisePropertyChanged("LogAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Drone.Shared.LoggingService.LogTypeEnum LogType {
            get {
                return this.LogTypeField;
            }
            set {
                if ((this.LogTypeField.Equals(value) != true)) {
                    this.LogTypeField = value;
                    this.RaisePropertyChanged("LogType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Server {
            get {
                return this.ServerField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerField, value) != true)) {
                    this.ServerField = value;
                    this.RaisePropertyChanged("Server");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogActionEnum", Namespace="http://schemas.datacontract.org/2004/07/BILogger.Enums")]
    public enum LogActionEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Log = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Email = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LogAndEmail = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogTypeEnum", Namespace="http://schemas.datacontract.org/2004/07/BILogger.Enums")]
    public enum LogTypeEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Utilization = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stats = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoggingService.IBILoggerService")]
    public interface IBILoggerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBILoggerService/HandleBIException", ReplyAction="http://tempuri.org/IBILoggerService/HandleBIExceptionResponse")]
        void HandleBIException(Drone.Shared.LoggingService.BIException e);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBILoggerService/HandleBIException", ReplyAction="http://tempuri.org/IBILoggerService/HandleBIExceptionResponse")]
        System.IAsyncResult BeginHandleBIException(Drone.Shared.LoggingService.BIException e, System.AsyncCallback callback, object asyncState);
        
        void EndHandleBIException(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBILoggerService/HandleException", ReplyAction="http://tempuri.org/IBILoggerService/HandleExceptionResponse")]
        void HandleException(string message, string additionalInfo, string applicationName, Drone.Shared.LoggingService.LogTypeEnum logType, Drone.Shared.LoggingService.LogActionEnum logAction, string source, string title, string url, string user, string server);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBILoggerService/HandleException", ReplyAction="http://tempuri.org/IBILoggerService/HandleExceptionResponse")]
        System.IAsyncResult BeginHandleException(string message, string additionalInfo, string applicationName, Drone.Shared.LoggingService.LogTypeEnum logType, Drone.Shared.LoggingService.LogActionEnum logAction, string source, string title, string url, string user, string server, System.AsyncCallback callback, object asyncState);
        
        void EndHandleException(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBILoggerServiceChannel : Drone.Shared.LoggingService.IBILoggerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BILoggerServiceClient : System.ServiceModel.ClientBase<Drone.Shared.LoggingService.IBILoggerService>, Drone.Shared.LoggingService.IBILoggerService {
        
        private BeginOperationDelegate onBeginHandleBIExceptionDelegate;
        
        private EndOperationDelegate onEndHandleBIExceptionDelegate;
        
        private System.Threading.SendOrPostCallback onHandleBIExceptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginHandleExceptionDelegate;
        
        private EndOperationDelegate onEndHandleExceptionDelegate;
        
        private System.Threading.SendOrPostCallback onHandleExceptionCompletedDelegate;
        
        public BILoggerServiceClient() {
        }
        
        public BILoggerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BILoggerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BILoggerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BILoggerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HandleBIExceptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> HandleExceptionCompleted;
        
        public void HandleBIException(Drone.Shared.LoggingService.BIException e) {
            base.Channel.HandleBIException(e);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHandleBIException(Drone.Shared.LoggingService.BIException e, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHandleBIException(e, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndHandleBIException(System.IAsyncResult result) {
            base.Channel.EndHandleBIException(result);
        }
        
        private System.IAsyncResult OnBeginHandleBIException(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Drone.Shared.LoggingService.BIException e = ((Drone.Shared.LoggingService.BIException)(inValues[0]));
            return this.BeginHandleBIException(e, callback, asyncState);
        }
        
        private object[] OnEndHandleBIException(System.IAsyncResult result) {
            this.EndHandleBIException(result);
            return null;
        }
        
        private void OnHandleBIExceptionCompleted(object state) {
            if ((this.HandleBIExceptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HandleBIExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HandleBIExceptionAsync(Drone.Shared.LoggingService.BIException e) {
            this.HandleBIExceptionAsync(e, null);
        }
        
        public void HandleBIExceptionAsync(Drone.Shared.LoggingService.BIException e, object userState) {
            if ((this.onBeginHandleBIExceptionDelegate == null)) {
                this.onBeginHandleBIExceptionDelegate = new BeginOperationDelegate(this.OnBeginHandleBIException);
            }
            if ((this.onEndHandleBIExceptionDelegate == null)) {
                this.onEndHandleBIExceptionDelegate = new EndOperationDelegate(this.OnEndHandleBIException);
            }
            if ((this.onHandleBIExceptionCompletedDelegate == null)) {
                this.onHandleBIExceptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHandleBIExceptionCompleted);
            }
            base.InvokeAsync(this.onBeginHandleBIExceptionDelegate, new object[] {
                        e}, this.onEndHandleBIExceptionDelegate, this.onHandleBIExceptionCompletedDelegate, userState);
        }
        
        public void HandleException(string message, string additionalInfo, string applicationName, Drone.Shared.LoggingService.LogTypeEnum logType, Drone.Shared.LoggingService.LogActionEnum logAction, string source, string title, string url, string user, string server) {
            base.Channel.HandleException(message, additionalInfo, applicationName, logType, logAction, source, title, url, user, server);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginHandleException(string message, string additionalInfo, string applicationName, Drone.Shared.LoggingService.LogTypeEnum logType, Drone.Shared.LoggingService.LogActionEnum logAction, string source, string title, string url, string user, string server, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginHandleException(message, additionalInfo, applicationName, logType, logAction, source, title, url, user, server, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndHandleException(System.IAsyncResult result) {
            base.Channel.EndHandleException(result);
        }
        
        private System.IAsyncResult OnBeginHandleException(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string message = ((string)(inValues[0]));
            string additionalInfo = ((string)(inValues[1]));
            string applicationName = ((string)(inValues[2]));
            Drone.Shared.LoggingService.LogTypeEnum logType = ((Drone.Shared.LoggingService.LogTypeEnum)(inValues[3]));
            Drone.Shared.LoggingService.LogActionEnum logAction = ((Drone.Shared.LoggingService.LogActionEnum)(inValues[4]));
            string source = ((string)(inValues[5]));
            string title = ((string)(inValues[6]));
            string url = ((string)(inValues[7]));
            string user = ((string)(inValues[8]));
            string server = ((string)(inValues[9]));
            return this.BeginHandleException(message, additionalInfo, applicationName, logType, logAction, source, title, url, user, server, callback, asyncState);
        }
        
        private object[] OnEndHandleException(System.IAsyncResult result) {
            this.EndHandleException(result);
            return null;
        }
        
        private void OnHandleExceptionCompleted(object state) {
            if ((this.HandleExceptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.HandleExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void HandleExceptionAsync(string message, string additionalInfo, string applicationName, Drone.Shared.LoggingService.LogTypeEnum logType, Drone.Shared.LoggingService.LogActionEnum logAction, string source, string title, string url, string user, string server) {
            this.HandleExceptionAsync(message, additionalInfo, applicationName, logType, logAction, source, title, url, user, server, null);
        }
        
        public void HandleExceptionAsync(string message, string additionalInfo, string applicationName, Drone.Shared.LoggingService.LogTypeEnum logType, Drone.Shared.LoggingService.LogActionEnum logAction, string source, string title, string url, string user, string server, object userState) {
            if ((this.onBeginHandleExceptionDelegate == null)) {
                this.onBeginHandleExceptionDelegate = new BeginOperationDelegate(this.OnBeginHandleException);
            }
            if ((this.onEndHandleExceptionDelegate == null)) {
                this.onEndHandleExceptionDelegate = new EndOperationDelegate(this.OnEndHandleException);
            }
            if ((this.onHandleExceptionCompletedDelegate == null)) {
                this.onHandleExceptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnHandleExceptionCompleted);
            }
            base.InvokeAsync(this.onBeginHandleExceptionDelegate, new object[] {
                        message,
                        additionalInfo,
                        applicationName,
                        logType,
                        logAction,
                        source,
                        title,
                        url,
                        user,
                        server}, this.onEndHandleExceptionDelegate, this.onHandleExceptionCompletedDelegate, userState);
        }
    }
}
